"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateCalendar = generateCalendar;

var _Calendar = _interopRequireDefault(require("../models/Calendar"));

var _database = require("../database/database");

var _errors = require("./errors");

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

//Generate Calendar
function generateCalendar(_x, _x2) {
  return _generateCalendar.apply(this, arguments);
}

function _generateCalendar() {
  _generateCalendar = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
    var year, totalDays, dates, totalDates, generatedCalendar, calendar, currentDate;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            year = req.body.year || new Date().getFullYear();
            dates = [];
            totalDates = 0;
            _context.prev = 3;
            _context.next = 6;
            return _database.sequelize.query("\n                select generate_series(\n                    (date '".concat(year, "-01-01')::date,\n                    (date '").concat(year, "-12-31')::date,\n                    interval '1 day'\n                );\n        "));

          case 6:
            generatedCalendar = _context.sent;
            totalDays = generatedCalendar[1].rowCount;
            calendar = generatedCalendar[0];
            currentDate = (0, _moment["default"])().format('YYYY-MM-DD');
            calendar.forEach(function (day) {
              var calendarDay = {
                date: day.generate_series,
                year: year,
                detail: 'Autogenerated day',
                visible: (0, _moment["default"])(day.generate_series).isAfter(currentDate) ? true : false
              };
              insertCalendarDay(calendarDay.date, calendarDay.year, calendarDay.visible);
              dates.push(calendarDay);
            });
            return _context.abrupt("return", res.status(200).json({
              ok: true,
              dates: dates,
              totalDates: totalDates
            }));

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](3);
            console.log('Error', _context.t0);
            (0, _errors.returnError)(res, _context.t0, 'Create Calendar');

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 14]]);
  }));
  return _generateCalendar.apply(this, arguments);
}

function insertCalendarDay(_x3, _x4, _x5, _x6) {
  return _insertCalendarDay.apply(this, arguments);
}

function _insertCalendarDay() {
  _insertCalendarDay = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(day, year, visible, totalDates) {
    var createdDay;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return _Calendar["default"].create({
              date: day,
              year: year,
              detail: 'Autogenerated day',
              isVisible: visible
            }, {
              fields: ['date', 'year', 'detail', 'isVisible'],
              returning: ['calendarID', 'date']
            });

          case 3:
            createdDay = _context2.sent;

            if (createdDay) {
              totalDates++;
            }

            return _context2.abrupt("return", totalDates);

          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2["catch"](0);
            console.log('Error', _context2.t0);
            (0, _errors.returnError)(res, _context2.t0, 'Create a Day in Calendar');

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 8]]);
  }));
  return _insertCalendarDay.apply(this, arguments);
}